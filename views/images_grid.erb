<div class='grid'>
	<%= erb :images, :locals => {:type => :grid}, :layout => false %>
</div>
<div class="modal fade" tabindex="-1" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div id="carousel" class="carousel slide">
        <div class="carousel-inner" role="listbox">
		    	<%= erb :images, :locals => {:type => :carousel}, :layout => false %>
		    </div>
			  <a class="left carousel-control" href="#carousel" role="button" data-slide="prev">
			    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
			  </a>
			  <a class="right carousel-control" href="#carousel" role="button" data-slide="next">
			    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
			  </a>
		  </div>
	  </div>
  </div>
</div>
<script type='text/javascript'>
	// layout Masonry after all images load
	var $grid = $('.grid').imagesLoaded().done( function() {
		$('.grid-item').css('visibility', 'visible');
		// init Masonry
		$grid.masonry({
		  itemSelector: '.grid-item',
		  fitWidth: true,
		  columnWidth: 350,
		  gutter: 16,
		  transitionDuration: '0.7s'
		});
	});
	var $carousel = $('#carousel');
	$(document).on('click', '.grid-item > img', function(e) {
		current_img_src = $(this).attr('src').replace('thumbnail_','');
		$current_img = $(".item > img[data-src='" + current_img_src + "'], .item > img[src='" + current_img_src + "']").eq(0);
		$current_img.parent().addClass('active');
		$('.carousel-control .glyphicon').each( function() {
			$(this).css('top',$(window).height() * 0.9 * 0.5);
		});
		$('.modal').modal('show');
		loadImage($current_img);
		$carousel.carousel({
			interval: 8000,
			pause: null
		});
	});
	$('.modal').on('hidden.bs.modal', function (e) {
		$carousel.carousel('pause');
  	$('.item.active').eq(0).removeClass('active');
	});
	$carousel.on('slide.bs.carousel', function(e) {
		$current_img = $(e.relatedTarget).find('img').eq(0);
		loadImage($current_img);
	})
	$carousel.on('slid.bs.carousel', function (e) {
		$next_img = $(e.relatedTarget).next().find('img').eq(0);
		// load next image
		lazyLoadImage($next_img);
		if(($(e.relatedTarget).index() + 1) % 15 == 0) {
			loadMoreImages('carousel', 5);
		}
	});
	$(document).bind('keyup', function(e) {
		if(e.which == 39){
			$carousel.carousel('next');
		}
		else if(e.which == 37){
			$carousel.carousel('prev');
		}
	});
	$(window).scroll(function() {
		if($(window).scrollTop() + $(window).height() == $(document).height()) {
			loadMoreImages('all', 15);
		}
	});
	$(window).resize(function() {
		$('.carousel-control .glyphicon').each( function() {
			$(this).css('top',$(window).height() * 0.9 * 0.5);
		});
		$('.item > img[src]').each(function() {
			$('.modal-dialog').eq(0).css('height',$(window).height() * 0.90);
			resizeImage($(this));
		});
	});
	function loadImage($img) {
		if($img.attr('data-src')) {
			lazyLoadImage($img);
		}
  	$img.parent().imagesLoaded().done( function() {
			// resize carousel image if necessary
			if($img[0].height > $(window).height() * 0.90) {
				resizeImage($img);
			}
			$img.parent().css('visibility', 'visible');
		});
	}
	function lazyLoadImage($img) {
  	$img.attr('src', $img.data('src'));
  	$img.removeAttr('data-src');
	}
	function loadMoreImages($type, number) {
		$.ajax({
			type: 'GET',
			url: window.location.pathname,
			dataType: 'html',
			data: {type: $type, marker: $('.grid-item > img').last().attr('src').match(RegExp('thumbnail_.*$'))[0], number: number},
			success: function(data) {
				if(!data.trim() == '') {
					$new_grid_content = $(data).filter("[class~='grid-item']");
					$new_carousel_content = $(data).filter("[class~='item']");
					$grid.append($new_grid_content);
					$('.carousel-inner').append($new_carousel_content);
					$carousel.carousel();
					// layout Masonry after all new images load
					$grid.imagesLoaded().done( function() {
						$('.grid-item').css('visibility', 'visible');
					  $grid.masonry('appended', $new_grid_content);
					});
				}
			}
		})
	}
	function resizeImage($img) {
		ratio = $img[0].height / $img[0].width;
		adjusted_height = $(window).height() * 0.90;
		adjusted_width = adjusted_height / ratio;
		$img.css('height',adjusted_height);
		$img.css('width',adjusted_width);
	}
</script>